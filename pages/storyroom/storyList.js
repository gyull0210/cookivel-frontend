import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import tw from 'twin.macro'
import { Swiper, SwiperSlide } from 'swiper/react'
import 'swiper/css'
import 'swiper/css/navigation'
import 'swiper/css/pagination'
import { Pagination, Navigation, Scrollbar, Autoplay } from "swiper"
import { HiBars3, HiMagnifyingGlass, HiOutlineBell, HiChevronRight, HiChevronLeft, HiXMark } from 'react-icons/hi2'
import Button from '../../components/core/button/Button'
import Avatar from '../../components/core/avatar/Avatar'
import MainCarousel from '../../components/overlay/mainCarosel/MainCarosel'
import { useEffect, useRef, useState } from 'react'
import useDetectClose from '../../components/hooks/useDetectClose'
import {faker} from '@faker-js/faker'
import Badge from '../../components/core/badge/Badge'
import StoryItem from './storyItem'
import Sidebar from '../../components/layout/sidebar/sidebar'
import Dropdown from './dropdown'
import { Menu, Popover, Transition } from '@headlessui/react'

export default function StoryList() {

  
  const [cardList, setCardList] = useState("");

  const [isLoading, setIsLoading] = useState(false); 
  const [isError, setIsError] = useState(false); 
 
  const [page, setPage] = useState(1);
  // useEffect(() => {
  //   const fetchData = async () => {
  //     const url = `https://picsum.photos/v2/list`;
  //     const response = await fetch(url);
  //     if (!response.ok) throw new Error("Response Error");
  //     setCardList((response).json());
  //     console.log(cardList)
  //   };
  //   fetchData().catch((error) => console.log(error));
  // }, []);

  const prevRef = useRef(null);
  const nextRef = useRef(null);
  const pageRef= useRef(null);

  const [myPageIsOpen, myPageRef, myPageHandler] = useDetectClose(false);
  const [sidebarIsOpen, sidebarRef, sidebarHandler] = useDetectClose(false);

  const imgUrl = faker.image.food(150,200)
  return (
    <>
      <Head>
        <title>쿠키블:스토리룸</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header tw="w-full h-16 border-b border-gray-200">
        <nav tw="relative flex justify-between items-center max-w-screen-lg mx-auto px-4 py-2">
          <div tw="lg:hidden">
            <button
              ref={sidebarRef}
              type="button"
              tw="p-3 hover:bg-gray-50 active:bg-gray-100 rounded-full"
              onClick={sidebarHandler}
            >
              <HiBars3 tw="w-6 h-6 text-gray-400"/>
            </button>
          </div>
          <div tw="flex justify-between items-center space-x-4">
            <div tw="inline-flex font-jua">
              <span tw="text-2xl font-bold">C</span>
              <span tw="text-2xl font-bold text-[#E7CE96]">OO</span>
              <span tw="text-2xl font-bold">KVEL</span>
            </div>

            <div tw="hidden lg:flex space-x-4 text-base">
              <Link tw="px-4 py-2 font-semibold hover:(underline decoration-4 underline-offset-4 decoration-[#E7CE96]) rounded-lg" href="/book/nextpage">자유연재</Link>
              <Link tw="px-4 py-2 font-semibold hover:(underline decoration-4 underline-offset-4 decoration-[#E7CE96]) rounded-lg" href="/review/forum">리뷰</Link>
              <Link tw="px-4 py-2 font-semibold hover:(underline decoration-4 underline-offset-4 decoration-[#E7CE96]) rounded-lg" href="">내 서재</Link>
            </div>
          </div>

          <div tw="flex justify-between items-center">
            <button
              type="button"
              tw="p-3 hover:bg-gray-50 active:bg-gray-100 rounded-full"
              onClick={()=>router.push("/search")}
            >
              <HiMagnifyingGlass tw="w-6 h-6 text-gray-400"/>
            </button>
            <Popover tw="relative">
              <Popover.Button tw="hidden lg:block p-3 hover:bg-gray-50 active:bg-gray-100 rounded-full">
                <HiOutlineBell tw="w-6 h-6 text-gray-400"/>
              </Popover.Button>
              <Popover.Panel tw="absolute z-10 w-32 h-48 mt-4 flex flex-col shadow rounded-lg duration-200 bg-white overflow-hidden">
                <div tw="flex flex-col h-full">
                  <div tw="border-b py-2 px-6">알림</div>
                  <div tw="">
                    <div tw="border-b py-2 px-6">메세지</div>
                    <div tw="border-b py-2 px-6">메세지</div>
                    <div tw="border-b py-2 px-6">메세지</div>
                  </div>           
                </div>
              </Popover.Panel>
            </Popover>
            <Menu as="div" tw="relative inline-block text-left">
              <div tw="relative">
              <Menu.Button tw="hidden md:flex items-center ml-3" type="button" ref={myPageRef} onClick={myPageHandler}>
                <Avatar size="sm" alt="avatar" src={faker.image.avatar()} width={32} height={32}/>
              </Menu.Button>
              <Menu.Items tw="absolute w-32 mt-4 z-10 flex flex-col shadow rounded-lg duration-200 bg-white overflow-hidden right-0">
                <Menu.Item>
                  {({ active }) => (
                    <a
                      tw="px-4 py-2"
                      css={active && tw`bg-gray-200`}
                      href="/account-settings"
                    >
                    알림
                    </a>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <a
                      tw="px-4 py-2"
                      css={active && tw`bg-gray-200`}
                      href="/account-settings"
                    >
                    스토리룸
                    </a>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <a
                      tw="px-4 py-2"
                      css={active && tw`bg-gray-200`}
                      href="/account-settings"
                    >
                    공지사항
                    </a>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <a
                      tw="px-4 py-2"
                      css={active && tw`bg-gray-200`}
                      href="/account-settings"
                    >
                    로그아웃
                    </a>
                  )}
                </Menu.Item>       
              </Menu.Items>
              </div>
            </Menu>
          </div>
        </nav>
      </header>
      <div tw="md:hidden border-b border-gray-200">
        <nav tw="relative flex justify-between items-center text-center max-w-screen-lg mx-auto">
          <a tw="py-3 w-full font-semibold active:bg-gray-100" href="">자유연재</a>
          <a tw="py-3 w-full font-semibold">리뷰</a>
          <a tw="py-3 w-full font-semibold">내 서재</a>
        </nav>
      </div>   
      <Sidebar isOpen={sidebarIsOpen} onClick={sidebarHandler}/>
      <main tw="flex flex-col mt-12 overflow-x-hidden">     
        <section tw="container mx-auto mt-12">
          <div tw="max-w-screen-lg mx-auto">
            <div tw="flex justify-end">
              <Button variant="solid" size="lg" label="작품 등록"/>
            </div>
           
            <StoryItem/>         
          </div>
        </section>
      </main>
      <footer>
        
      </footer>
    </>
  )
}

